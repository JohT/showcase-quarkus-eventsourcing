<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<groupId>io.github.joht.showcase.quarkuseventsourcing</groupId>
	<artifactId>showcase-quarkus-eventsourcing</artifactId>
	<version>1.3-SNAPSHOT</version>

	<properties>
    	<compiler-plugin.version>3.8.1</compiler-plugin.version>
    	<maven.compiler.parameters>true</maven.compiler.parameters>
    	<maven.compiler.source>11</maven.compiler.source>
    	<maven.compiler.target>11</maven.compiler.target>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<surefire-plugin.version>2.22.2</surefire-plugin.version>
		<failsafe-plugin.version>2.22.2</failsafe-plugin.version>
		<jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
		<jasmine-maven-plugin.version>2.2</jasmine-maven-plugin.version>

   		<quarkus.platform.artifact-id>quarkus-universe-bom</quarkus.platform.artifact-id>
    	<quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>
		<quarkus.platform.version>2.6.1.Final</quarkus.platform.version>
		<quarkus.plugin.version>2.6.1.Final</quarkus.plugin.version>
		
		<axon.version>4.5.6</axon.version>
		<dom4j.version>1.6.1</dom4j.version>
		<xom.version>1.2.10</xom.version>

		<archunit.version>0.22.0</archunit.version>
		<equalsverifier.version>3.8.2</equalsverifier.version>
		<hamcrest.version>2.2</hamcrest.version>
	</properties>

  	<dependencyManagement>
    	<dependencies>
      		<dependency>
        		<groupId>${quarkus.platform.group-id}</groupId>
        		<artifactId>${quarkus.platform.artifact-id}</artifactId>
        		<version>${quarkus.platform.version}</version>
        		<type>pom</type>
        		<scope>import</scope>
      		</dependency>
    	</dependencies>
  	</dependencyManagement>

	<dependencies>
		<!-- Axon - CQRS and EventSourcing Framework -->
		<dependency>
			<groupId>org.axonframework</groupId>
			<artifactId>axon-configuration</artifactId>
			<version>${axon.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.axonframework</groupId>
			<artifactId>axon-modelling</artifactId>
			<version>${axon.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.axonframework</groupId>
			<artifactId>axon-messaging</artifactId>
			<version>${axon.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
		</dependency>

		<!-- Axon - Optional dependencies for CQRS and EventSourcing Framework (only needed for native compile) -->
		<dependency>
    		<groupId>com.io7m.xom</groupId>
    		<artifactId>xom</artifactId>
   			<version>${xom.version}</version>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-core</artifactId>
			<scope>compile</scope>
			<optional>true</optional>
		</dependency>

		<!-- Quarkus - Dependencies workaround for native image build with reportErrorsAtRuntime -->
		<dependency>
			<groupId>jakarta.security.jacc</groupId>
			<artifactId>jakarta.security.jacc-api</artifactId>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
		</dependency>
		
		<!-- Quarkus - Database JDBC driver for PostgreSql -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-jdbc-postgresql</artifactId>
		</dependency>

		<!-- Quarkus - Database JDBC driver for H2 -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-jdbc-h2</artifactId>
		</dependency>

		<!-- Quarkus - Database Schema Migration Tool -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-flyway</artifactId>
		</dependency>

		<!-- Microprofile -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-resteasy</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-hibernate-orm</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-jsonb</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-jsonp</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-resteasy-jsonb</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-narayana-jta</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-openapi</artifactId>
		</dependency>

		<!-- Integration Testing -->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-client</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-test-h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-junit5</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-jacoco</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- Testing - Architectural Unit Testing Libraries -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5</artifactId>
			<version>${archunit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Testing - Equals and hashcode -->
		<dependency>
			<groupId>nl.jqno.equalsverifier</groupId>
			<artifactId>equalsverifier</artifactId>
			<version>${equalsverifier.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Testing - event-sourcing -->
		<dependency>
			<groupId>org.axonframework</groupId>
			<artifactId>axon-test</artifactId>
			<version>${axon.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Testing Libraries -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.github.searls</groupId>
				<artifactId>jasmine-maven-plugin</artifactId>
				<version>2.2</version>
				<!-- Run Jasmine JavaScript Unit-Tests -->
				<executions>
					<execution>
						<goals>
							<goal>bdd</goal>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<sourceExcludes>
						<exclude>**/startup.js</exclude>
					</sourceExcludes>
					<keepServerAlive>true</keepServerAlive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.github.timurstrekalov</groupId>
				<artifactId>saga-maven-plugin</artifactId>
				<version>1.5.5</version>
				<!-- Measure Code Coverage of JavaScript Tests -->
				<executions>
					<execution>
						<goals>
							<goal>coverage</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<baseDir>http://localhost:${jasmine.serverPort}</baseDir>
					<outputDir>${project.build.directory}/coverage</outputDir>
					<noInstrumentPatterns>
						<pattern>.*/spec/.*</pattern> <!-- Don't instrument specs -->
						<pattern>.*/jasmine/.*</pattern> <!-- Don't instrument jasmine -->
						<pattern>.*/lib/.*</pattern> <!-- Don't instrument libs -->
						<pattern>.*/polyfills/.*</pattern> <!-- Don't instrument libs -->
					</noInstrumentPatterns>
				</configuration>
			</plugin>
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.5.1</version>
				<!-- Compress JavaScript so it takes less time to load -->
				<executions>
					<execution>
						<goals>
							<goal>compress</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<preProcessAggregates>true</preProcessAggregates>
					<!-- Aggregate/Copy all JavaScript sources into one application.js file. -->
					<aggregations>
						<aggregation>
							<insertNewLine>true</insertNewLine>
							<inputDir>${project.basedir}/src/main/javascript</inputDir>
							<output>${project.build.directory}/aggregated/javascript/application.js</output>
							<includes>
								<include>**/polyfills/*.js</include>
								<include>**/*.js</include>
							</includes>
						</aggregation>
					</aggregations>
					<includes>
						<include>**/*application.js</include>
					</includes>
					<jswarn>false</jswarn>
					<nosuffix>true</nosuffix>
					<nomunge>true</nomunge>	<!-- disables obfuscation -->
					<sourceDirectory>${project.build.directory}/aggregated</sourceDirectory>
					<outputDirectory>${project.build.directory}/classes/META-INF/resources</outputDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.10.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>3.1.2</version>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler-plugin.version}</version>
				<configuration>
					<parameters>${maven.compiler.parameters}</parameters>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.quarkus</groupId>
				<artifactId>quarkus-maven-plugin</artifactId>
				<version>${quarkus.plugin.version}</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
							<goal>generate-code</goal>
							<goal>generate-code-tests</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire-plugin.version}</version>
				<configuration>
					<systemProperties>
						<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
						<maven.home>${maven.home}</maven.home>
					</systemProperties>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${failsafe-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<systemPropertyVariables>
                  		<buildDirectory>${project.build.directory}</buildDirectory>
                  		<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    	<maven.home>${maven.home}</maven.home>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<!-- Measure Code-Coverage of Java Unit Tests including @QuarkusTest annotated ones-->
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>
							<destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>
							<append>true</append>
						</configuration>
					</execution>
					<!-- Set threshold/limit for branch code coverage that needs to be met. Otherwise build fails.-->
					<execution>
						<id>jacoco-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.82</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>native</id>
			<activation>
				<property>
					<name>native</name>
				</property>
			</activation>
			<properties>
        		<quarkus.package.type>native</quarkus.package.type>
        		<quarkus.native.additional-build-args>--allow-incomplete-classpath,-H:ReflectionConfigurationFiles=${project.basedir}/reflection-config.json,-H:ResourceConfigurationFiles=${project.basedir}/resources-config.json</quarkus.native.additional-build-args>
     		</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${failsafe-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<systemPropertyVariables>
								<native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
                    			<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    			<maven.home>${maven.home}</maven.home>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- The additional profile "native-image-agent-config" is used to build the java application jar, -->
		<!-- start it with the GraalVM JVM with activated native-image-agent and run the integration tests on it. -->
		<!-- The generated reports and template configurations are written to the folder "native-image-reports" and -->
		<!-- are based on the collected runtime informations. These are helpful to configure native image build. -->
		<profile>
			<id>native-image-agent-config</id>
			<activation>
				<property>
					<name>native-image-agent-config</name>
				</property>
			</activation>
			<properties>
       			<jacoco.skip>true</jacoco.skip> <!-- Skip test coverage reports -->
       			<skipTests>true</skipTests>
    		</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${failsafe-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<skipTests>false</skipTests> <!--  Don't skip integration tests -->
							<failIfNoTests>true</failIfNoTests>
							<shutdown>testset</shutdown>
							<systemPropertyVariables>
                  				<buildDirectory>${project.build.directory}</buildDirectory>
                  				<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    			<maven.home>${maven.home}</maven.home>
                    			<!--  GraalVM java command arguments for the native-image-agent to generate configuration files-->
                    			<quarkus.test.arg-line>-agentlib:native-image-agent=config-output-dir=target/native-image-agent-reports,caller-filter-file=native-image-caller-filter-rules.json,config-write-period-secs=1,config-write-initial-delay-secs=5</quarkus.test.arg-line>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- The additional profile "native-image-agent-trace" is used to build the java application jar, -->
		<!-- start it with the GraalVM JVM with activated native-image-agent and run the integration tests on it. -->
		<!-- The generated trace report is written to "target/native-image-trace.json" and contains details about any -->
		<!-- runtime access that might need to be configured to build a fully running native image. -->
		<profile>
			<id>native-image-agent-trace</id>
			<activation>
				<property>
					<name>native-image-agent-trace</name>
				</property>
			</activation>
			<properties>
       			<jacoco.skip>true</jacoco.skip> <!-- Skip test coverage reports -->
       			<skipTests>true</skipTests>
    		</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${failsafe-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<skipTests>false</skipTests> <!--  Don't skip integration tests -->
							<failIfNoTests>true</failIfNoTests>
							<shutdown>testset</shutdown>
							<systemPropertyVariables>
                  				<buildDirectory>${project.build.directory}</buildDirectory>
                  				<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    			<maven.home>${maven.home}</maven.home>
                    			<!--  GraalVM java command arguments for the native-image-agent to write a trace file-->
                    			<quarkus.test.arg-line>-agentlib:native-image-agent=trace-output=${project.build.directory}/native-image-agent-trace.json,config-write-period-secs=1,config-write-initial-delay-secs=5</quarkus.test.arg-line>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
