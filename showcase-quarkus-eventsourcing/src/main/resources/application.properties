# Configuration file

# Note: The dependency injection implementation of quarkus (ArC) removes beans, that seem to be unused.
# Since it is no possible to detect beans, that are loaded using "beanManager.getBeans",
# these would be removed. Telling quarkus to only remove "framework" beans, that are not used,
# is a good compromise.
quarkus.arc.remove-unused-beans=framework

# Logging
quarkus.log.level=INFO

# Java-Test Coverage Report
%test.quarkus.jacoco.title=Showcase Quarkus Event Sourcing

# Graceful shutdown for 3 seconds
quarkus.shutdown.timeout=3

# Note: Failed Classloading configuration attempt for ServiceLoader in quarkus dev mode
# 
# When the Java "ServiceLoader" is used for example 
# to get all implementations of the ConfigurerModule or ParameterResolverFactory interfaces,
# it can't find the custom implementation when quarkus dev mode is used.
#
# When "Thread.currentThread().getContextClassLoader()" is used as a ClassLoader, 
# "ServiceLoader" would work as expected. This is also the default when no ClassLoader is specified.
# Within Jakarta EE / Microprofile applications this is a quite common way to get the ClassLoader,
# but needs to be used judiciously:
# https://stackoverflow.com/questions/1771679/difference-between-threads-context-class-loader-and-normal-classloader
# 
# Parent first fails if not all dependent artefacts are given and then doesn't resolve the problem.
#
# quarkus.class-loading.parent-first-artifacts=org.axonframework:axon-modelling,org.axonframework:axon-eventsourcing,org.axonframework:axon-messaging,org.axonframework:axon-configuration
#
# Defining "axon-configuration" as reloadable actually works for the ServiceLoader that loads ConfigurerModule implementations.
# However, as soon as other artifacts are defined, wired NoClassDefFound exceptions are thrown.
#
# quarkus.class-loading.reloadable-artifacts=org.axonframework:axon-configuration


# Flyway database setup base settings
quarkus.flyway.migrate-at-start=true
quarkus.flyway.connect-retries=3
quarkus.flyway.schemas=axon_on_microprofile_tryout,axon_on_microprofile_query_tryout
quarkus.flyway.table=flyway_history

# Flyway database setup locations (supporting database and command/query specific setups)
#   H2 as database for the command- and query-side:
quarkus.flyway.locations=db/command/common,db/command/h2,db/query/common,db/query/h2
#   PostgreSql as database for the command- and query-side (for quarkus.profile=postges):
%postgres.quarkus.flyway.locations=db/command/common,db/command/postgresql,db/query/common,db/query/postgresql
#   PostgreSql as database for the command-side and H2 as database for the query-side:
#quarkus.flyway.locations=db/command/common,db/command/postgresql,db/query/common,db/query/h2

# When enabling XA transactions for a datasource it is recommended to also
# enable transaction recovery by setting quarkus.transaction-manager.enable-recovery=true, 
# otherwise data may be lost if the application is terminated abruptly.
quarkus.transaction-manager.enable-recovery=true
%postgres.quarkus.transaction-manager.enable-recovery=true

# H2 in-memory as default database e.g. for flyway
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:tcp://${H2_HOST:localhost}/mem:eventsourcing;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;DATABASE_TO_UPPER=false
quarkus.datasource.username=sa
quarkus.datasource.password=sa
quarkus.datasource.jdbc.initial-size=2
quarkus.datasource.jdbc.min-size=2
quarkus.datasource.jdbc.max-size=8
quarkus.datasource.jdbc.transactions=xa

# PostgreSql as default database e.g. for flyway (for quarkus.profile=postges)
%postgres.quarkus.datasource.db-kind=postgresql
%postgres.quarkus.datasource.jdbc.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/postgres?stringtype=unspecified
%postgres.quarkus.datasource.username=postgres
%postgres.quarkus.datasource.password=postgres
%postgres.quarkus.datasource.jdbc.initial-size=2
%postgres.quarkus.datasource.jdbc.min-size=2
%postgres.quarkus.datasource.jdbc.max-size=8
%postgres.quarkus.datasource.jdbc.transactions=xa

# H2 in-memory as messaging database 
quarkus.datasource.messaging.db-kind=h2
quarkus.datasource.messaging.jdbc.url=jdbc:h2:tcp://${H2_HOST:localhost}/mem:eventsourcing;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;DATABASE_TO_UPPER=false
quarkus.datasource.messaging.username=sa
quarkus.datasource.messaging.password=sa
quarkus.datasource.messaging.jdbc.initial-size=2
quarkus.datasource.messaging.jdbc.min-size=2
quarkus.datasource.messaging.jdbc.max-size=8
quarkus.datasource.messaging.jdbc.transactions=xa

# PostgreSql as messaging database (for quarkus.profile=postges)
%postgres.quarkus.datasource.messaging.db-kind=postgresql
%postgres.quarkus.datasource.messaging.jdbc.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/postgres?stringtype=unspecified
%postgres.quarkus.datasource.messaging.username=postgres
%postgres.quarkus.datasource.messaging.password=postgres
%postgres.quarkus.datasource.messaging.jdbc.initial-size=2
%postgres.quarkus.datasource.messaging.jdbc.min-size=2
%postgres.quarkus.datasource.messaging.jdbc.max-size=8
%postgres.quarkus.datasource.messaging.jdbc.transactions=xa

# ----------------------------------------------
# Persistence Unit Configuration
# -------------
# (2022-01) "persistence.xml.reference" contains the former "persistence.xml" configuration that is now located here.
# The drawback is, that this is Quarkus specific. Running the application on another MicroProfile compliant server
# like WildFly would need the "persistence.xml" to be restored again.
# The advantage is, that quarkus configuration profiles can be used here which makes it possible to
# switch between H2 and PostgreSQL using a build property without the need to (un-)comment code in different files manually.
# -------------
quarkus.hibernate-orm."query.model".datasource=messaging
quarkus.hibernate-orm."query.model".packages=io.github.joht.showcase.quarkuseventsourcing.query.model
quarkus.hibernate-orm."query.model".validate-in-dev-mode=false
quarkus.hibernate-orm."query.model".dialect=org.hibernate.dialect.H2Dialect
%postgres.quarkus.hibernate-orm."query.model".dialect=org.hibernate.dialect.PostgreSQLDialect

# Quarkus supports CORS directly.
# To not depend directly upon quarkus, standard microprofile config is used
# to configure the settings for the colocated CrossOriginResourceSharingFilter using standard JAX-RS.
#
# For testing purposes, localhost on 5500 is allowed (CORS) to use a LiveServer
# for UI development inside VSCode.
rest.cors=true
rest.cors.allow.credentials=true
rest.cors.allow.origin=http://127.0.0.1:5500
rest.cors.allow.methods=GET,PUT,POST,DELETE,OPTIONS,HEAD
rest.cors.allow.headers=Origin,Authorization,Location,Content-Type
rest.cors.expose.headers=Origin,Authorization,Location,Content-Type
