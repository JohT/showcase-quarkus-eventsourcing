[
    {
        "methods": [
            {
                "parameterTypes": [
                ],
                "name": "value"
            }
        ],
        "name": "java.beans.ConstructorProperties"
    },
    {
        "name": "org.axonframework.commandhandling.CommandHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.common.Priority",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.config.ProcessingGroup",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.EventHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.commandhandling.LoggingDuplicateCommandHandlerResolver",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.commandhandling.SimpleCommandBus",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.commandhandling.gateway.AbstractCommandGateway",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.commandhandling.gateway.DefaultCommandGateway",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.AbstractEventBus",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.AbstractEventProcessor",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.LoggingErrorHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.PropagatingErrorHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.SubscribingEventProcessor",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.TrackingEventProcessor",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.TrackingEventProcessorConfiguration",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.async.SequentialPerAggregatePolicy",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.tokenstore.jdbc.JdbcTokenStore",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventsourcing.AbstractAggregateFactory",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventsourcing.EventCountSnapshotTriggerDefinition",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventsourcing.EventSourcingRepository",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventsourcing.GenericAggregateFactory",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventsourcing.eventstore.AbstractEventStore",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventsourcing.eventstore.EmbeddedEventStore",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.lifecycle.ShutdownHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.lifecycle.StartHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.messaging.annotation.MultiParameterResolverFactory",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.messaging.unitofwork.RollbackConfigurationType",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.messaging.unitofwork.RollbackConfigurationType$2",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.AbstractRepository",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.AggregateAnnotationCommandHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.AnnotationCommandTargetResolver",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.LockingRepository",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",
        "allDeclaredMethods": true
    },
    {
        "methods": [
            {
                "parameterTypes": [
                ],
                "name": "<init>"
            }
        ],
        "name": "org.axonframework.modelling.command.inspection.MethodCreationPolicyDefinition"
    },
    {
        "name": "org.axonframework.queryhandling.DefaultQueryGateway",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.queryhandling.LoggingQueryInvocationErrorHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.queryhandling.QueryGateway",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.queryhandling.QueryInvocationErrorHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.queryhandling.QueryUpdateEmitter",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.queryhandling.SimpleQueryBus",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.queryhandling.SimpleQueryUpdateEmitter",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.RevisionResolver",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.Serializer",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.GenericUpcasterChain",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.SingleEntryUpcaster",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.Upcaster",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.event.EventUpcaster",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.event.EventUpcasterChain",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.event.SingleEventUpcaster",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.xml.Dom4JToByteArrayConverter",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.xml.InputStreamToDom4jConverter",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.config.MessageHandlerRegistrar",
        "allDeclaredMethods": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.GapAwareTrackingToken",
        "allDeclaredMethods": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.ReplayToken",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventhandling.TrackingToken",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "name": "org.axonframework.eventhandling.WrappedToken",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "name": "org.axonframework.eventhandling.Timestamp",
        "allDeclaredMethods": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.messaging.MetaData",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.event.EventUpcaster",
        "allDeclaredMethods": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.serialization.upcasting.SingleEntryUpcaster",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.Upcaster",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.event.EventUpcaster",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.serialization.upcasting.event.IntermediateEventRepresentation",
        "allDeclaredMethods": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.serialization.upcasting.event.SingleEventUpcaster",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.AggregateIdentifier",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.AggregateRoot",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.command.EntityId",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.modelling.saga.SagaEventHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.queryhandling.QueryHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.messaging.annotation.MessageHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.eventsourcing.EventSourcingHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "org.axonframework.common.Priority",
        "allDeclaredMethods": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.serialization.converters.BlobToInputStreamConverter",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.serialization.converters.InputStreamToByteArrayConverter",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.serialization.converters.ByteArrayToStringConverter",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.serialization.converters.StringToByteArrayConverter",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.common.property.UniformPropertyAccessStrategy",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.common.property.BeanPropertyAccessStrategy",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.common.property.DirectPropertyAccessStrategy",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.messaging.annotation.AnnotatedMessageHandlingMemberDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.commandhandling.MethodCommandHandlerDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.replay.ReplayAwareMessageHandlerWrapper",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.modelling.saga.SagaMethodMessageHandlerDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.modelling.command.inspection.MethodCommandHandlerInterceptorDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.modelling.command.inspection.AggregateMemberAnnotatedChildEntityDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.modelling.command.inspection.AggregateMemberAnnotatedChildEntityMapDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.modelling.command.inspection.AggregateMemberAnnotatedChildEntityCollectionDefinition",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.commandhandling.CurrentUnitOfWorkParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.ConcludesBatchParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.SequenceNumberParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.TrackingTokenParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.TimestampParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventhandling.replay.ReplayParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.messaging.annotation.DefaultParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.messaging.annotation.SourceIdParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "org.axonframework.eventsourcing.conflictresolution.ConflictResolution",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.query.boundary.EventTimestampParameter",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.query.boundary.QueryModelQueryHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.query.boundary.QueryModelProjection",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.query.boundary.QueryModelEventHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.query.boundary.QueryModelResetHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.command.boundary.CommandModelAggregate",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.command.boundary.CommandModelAggregateIdentifier",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.command.boundary.CommandModelCommandHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.messaging.command.boundary.CommandModelEventSourcingHandler",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.message.command.CommandTargetAggregateIdentifier",
        "allDeclaredMethods": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.message.command.CommandTargetAggregateVersion",
        "allDeclaredMethods": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "io.github.joht.showcase.quarkuseventsourcing.domain.model.account.AccountAggregate",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "io.github.joht.showcase.quarkuseventsourcing.query.model.account.AccountQueryHandler",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "allDeclaredConstructors": true,
        "name": "io.github.joht.showcase.quarkuseventsourcing.query.model.nickname.NicknameQueryHandler",
        "allDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.message.command.account.ChangeNicknameCommand",
        "queryAllDeclaredMethods": true,
        "allDeclaredFields": true
    },
    {
        "name": "io.github.joht.showcase.quarkuseventsourcing.message.command.account.CreateAccountCommand",
        "queryAllDeclaredMethods": true,
        "allDeclaredFields": true
    }
]
